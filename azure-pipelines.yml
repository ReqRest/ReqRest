trigger:
- master
- dev

name: $(Date:yyyy-MM-dd)-$(Rev:.r)

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  BuildConfiguration: 'Release'

  ${{ if and(eq(variables['system.pullrequest.isfork'], false), eq(variables['Build.SourceBranch'], 'refs/heads/dev')) }}:
    BuildLabel: ${{ $(Build.BuildNumber) }}

steps:
- script: echo $(BuildLabel)

- task: DotNetCoreInstaller@1
  displayName: 'Install .NET Core 3.0'
  inputs:
    packageType: 'sdk'
    version: '3.0.x'

- task: DotNetCoreInstaller@1
  displayName: 'Install .NET Core 2.2'
  inputs:
    packageType: 'sdk'
    version: '2.2.x'

# InheritDocTool requires .NET Core 2.1.
- task: DotNetCoreInstaller@1
  displayName: 'Install .NET Core 2.1'
  inputs:
    packageType: 'sdk'
    version: '2.1.x'

- script: dotnet tool install -g InheritDocTool
  displayName: Install InheritDocTool

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build'

- script: InheritDoc -o
  displayName: 'Run InheritDoc'
  condition: succeeded()

- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet Packages (CI)'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build /p:BuildLabel=ci-$(Date:yyyy-MM-dd).$(Rev:.r)'
    versioningScheme: 'off'
    outputDir: '$(Build.ArtifactStagingDirectory)/CI'
  condition: |
    and
    (
      succeeded(),
      eq(variables['system.pullrequest.isfork'], false),
      or
      (
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        eq(variables['Build.SourceBranch'], 'refs/heads/dev')
      )
    )
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish NuGet Package Artifact (CI)'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/CI'
    ArtifactName: 'NuGet Packages (CI)'
  condition: |
    and
    (
      succeeded(),
      eq(variables['system.pullrequest.isfork'], false),
      or
      (
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        eq(variables['Build.SourceBranch'], 'refs/heads/dev')
      )
    )

- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet Packages (Release)'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) --no-build'
    versioningScheme: 'off'
    outputDir: '$(Build.ArtifactStagingDirectory)/Release'
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      eq(variables['system.pullrequest.isfork'], false)
    )

- task: PublishBuildArtifacts@1
  displayName: 'Publish NuGet Package Artifact (Release)'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/Release'
    ArtifactName: 'NuGet Packages (Release)'
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      eq(variables['system.pullrequest.isfork'], false)
    )
