<#
    // Recommendation:
    // Don't edit this file in Visual Studio. Download VS Code and this extension:
    // https://marketplace.visualstudio.com/items?itemName=zbecknell.t4-support
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
const int MinParametersToGenerate = 0;
const int MaxParametersToGenerate = 8;

// Generates the string for a type parameter, e.g. "T1" or "T2".
// Empty string for 0, i.e. no type parameter.
string GetTParam(int index, string format = null) =>
	index == 0 ? "" : string.Format(format ?? "T{0}", index);

// Generates a list of type parameters until the index, e.g. ["T1", "T2", "T3"].
// Empty list for 0, i.e. no type parameter.
string[] GetTParamList(int to, string format = null) =>
	Enumerable
		.Range(1, to)
		.Select(i => GetTParam(i, format))
		.Where(s => !string.IsNullOrEmpty(s))
		.ToArray();

// Generates a string representing a list of type parameters until the index, e.g. "T1, T2, T3".
// Empty string for 0, i.e. no type parameter.
string GetTParamListString(int to, string format = null) =>
	string.Join(", ", GetTParamList(to, format));

// Generates a type parameter declaration of parameters until the index, e.g. "<T1, T2, T3>".
// Empty string for 0, i.e. no type parameter.
string GetTParamDeclaration(int to, string format = null) =>
	to == 0 ? "" : $"<{GetTParamListString(to, format)}>";

// Are type parameters generated for this index?
bool HasTypeParameter(int index) =>
	index != 0;
#>
// <auto-generated>
//   This code has been auto-generated by the associated .tt file.
//   Any changes made to in this file will be lost when the file is regenerated.
// </auto-generated>

#nullable enable

namespace ReqRest.Tests
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Moq;
    using Moq.Protected;
    using ReqRest.Builders;
    using ReqRest.Http;
    using ReqRest.Internal.Serializers;
    using ReqRest.Serializers.Json;
    using ReqRest.Tests.Sdk.Models;
    using ReqRest.Tests.Sdk.TestBases;
    using Xunit;
<#  for (var i = MinParametersToGenerate; i <= MaxParametersToGenerate; i++) {
        var T = GetTParam(i, "Dto{0}");
        var TList = GetTParamList(i, "Dto{0}");
        var TListString = GetTParamListString(i, "Dto{0}");
        var TDeclaration = GetTParamDeclaration(i, "Dto{0}");
        var TNext = GetTParam(i + 1, "Dto{0}");
        var TNextDeclaration = GetTParamDeclaration(i + 1, "Dto{0}");
        var TPreviousDeclaration = i > 0 ? GetTParamDeclaration(i - 1, "Dto{0}") : "";
        var TestClassName = $"ApiRequest{(i == 0 ? "" : $"T{i}")}Tests";
        var hasTParam = HasTypeParameter(i);
        var isLastT = i == MaxParametersToGenerate;
        
        string Upgrade(string newParam) =>
            string.IsNullOrEmpty(TListString)
                ? newParam 
                : $"{TListString}, {newParam}";
        #>

    public abstract class <#= TestClassName #> : TestBase<ApiRequest<#= TDeclaration #>>
    {

        /// <summary>The name of the HttpMessageHandler.SendAsync() method. Used for mocking.</summary>
        protected const string SendAsyncMethod = "SendAsync";

        /// <summary>Status code ranges used for testing Receive() calls.</summary>
        protected static readonly StatusCodeRange[] DefaultStatusCodes = { 204, (100, 200), (null, 123) };
        
        protected override ApiRequest<#= TDeclaration #> CreateService()
        {
            var (_, httpClient) = MockHttpClientAndHandler();
            return CreateService(() => httpClient, null);
        }

        protected virtual ApiRequest<#= TDeclaration #> CreateService(Func<HttpClient> httpClientProvider, HttpRequestMessage? httpRequestMessage)
        {
            return new ApiRequest(httpClientProvider, httpRequestMessage)
                .SetRequestUri("https://reqrest.github.io")
            <# for (var j = 1; j <= i; j++) { #>
                .Receive<Dto<#= j #>>().AsJson(forStatusCodes: <#= j #>)
            <# } #>
                ;
        }

        protected (Mock<HttpMessageHandler>, HttpClient) MockHttpClientAndHandler()
        {
            var httpMessageHandlerMock = new Mock<HttpMessageHandler>();
            var httpClient = new HttpClient(httpMessageHandlerMock.Object);

            httpMessageHandlerMock.Protected()
                .Setup<Task<HttpResponseMessage>>(
                    SendAsyncMethod,
                    ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>()
                )
                .ReturnsAsync(new HttpResponseMessage());

            return (httpMessageHandlerMock, httpClient);
        }

        <# if (!isLastT) { #>

        protected void TestExpectedResponseTypeDescriptor<TNext>(
            Type expectedType,
            Type expectedSerializerType,
            Func<ApiRequest<#= TDeclaration #>, ApiRequest<<#= Upgrade("TNext") #>>> receive,
            params StatusCodeRange[] expectedStatusCodes)
        {
            var upgraded = receive(Service);
            var descriptor = upgraded.PossibleResponseTypes.Last();

            Assert.Equal(expectedType, descriptor.ResponseType);
            Assert.Equal(expectedStatusCodes, descriptor.StatusCodes);
            Assert.IsType(expectedSerializerType, descriptor.HttpContentDeserializerProvider());
        }
        
        <# } #>        
    
        public class FetchResponseAsyncTests : <#= TestClassName #>
        {
            
            [Fact]
            public async Task Throws_InvalidOperationException_If_HttpClientProvider_Returns_Null()
            {
                var service = CreateService(() => null!, null);
                await Assert.ThrowsAsync<InvalidOperationException>(async () => await service.FetchResponseAsync());
            }

            [Fact]
            public async Task Uses_HttpClient_To_Make_Request()
            {
                var (httpMessageHandlerMock, httpClient) = MockHttpClientAndHandler();
                var service = CreateService(() => httpClient, null);
                await service.FetchResponseAsync();

                // The only thing that we care about is that the HttpClient was used to send
                // the request message.
                httpMessageHandlerMock.Protected().Verify(
                    SendAsyncMethod,
                    Times.Once(),
                    ItExpr.IsAny<HttpRequestMessage>(),
                    ItExpr.IsAny<CancellationToken>()
                );
            }

            [Fact]
            public async Task Sends_HttpRequestMessage_Of_Request()
            {
                var (httpMessageHandlerMock, httpClient) = MockHttpClientAndHandler();
                var service = CreateService(() => httpClient, null);
                await service.FetchResponseAsync();

                httpMessageHandlerMock.Protected().Verify(
                    SendAsyncMethod,
                    Times.Once(),
                    service.HttpRequestMessage,
                    ItExpr.IsAny<CancellationToken>()
                );
            }

        }

        <# if (!isLastT) { #>

        public class ReceiveNoContentTests : <#= TestClassName #>
        {
        
            [Fact]
            public void Default_Adds_Expected_ResponseTypeDescriptor()
            {
                TestExpectedResponseTypeDescriptor<NoContent>(
                    typeof(NoContent),
                    typeof(NoContentSerializer),
                    req => req.ReceiveNoContent(), 
                    StatusCode.NoContent
                );
            }

            [Fact]
            public void StatusCodeRangeArray_Adds_Expected_ResponseTypeDescriptor()
            {
                TestExpectedResponseTypeDescriptor<NoContent>(
                    typeof(NoContent),
                    typeof(NoContentSerializer),
                    req => req.ReceiveNoContent((StatusCodeRange[])DefaultStatusCodes),
                    DefaultStatusCodes
                );
            }
            
            [Fact]
            public void StatusCodeRangeEnumerable_Adds_Expected_ResponseTypeDescriptor()
            {
                TestExpectedResponseTypeDescriptor<NoContent>(
                    typeof(NoContent),
                    typeof(NoContentSerializer),
                    req => req.ReceiveNoContent((IEnumerable<StatusCodeRange>)DefaultStatusCodes),
                    DefaultStatusCodes
                );
            }

        }

        public class ReceiveStringTests : <#= TestClassName #>
        {
            
            [Fact]
            public void StatusCodeRangeArray_Adds_Expected_ResponseTypeDescriptor()
            {
                TestExpectedResponseTypeDescriptor(
                    typeof(string),
                    typeof(StringSerializer),
                    req => req.ReceiveString((StatusCodeRange[])DefaultStatusCodes),
                    DefaultStatusCodes
                );
            }

            [Fact]
            public void StatusCodeRangeEnumerable_Adds_Expected_ResponseTypeDescriptor()
            {
                TestExpectedResponseTypeDescriptor(
                    typeof(string),
                    typeof(StringSerializer),
                    req => req.ReceiveString((IEnumerable<StatusCodeRange>)DefaultStatusCodes),
                    DefaultStatusCodes
                );
            }

        }

        public class ReceiveByteArrayTests : <#= TestClassName #>
        {
            
            [Fact]
            public void ReceiveByteArray_Adds_Expected_ResponseTypeDescriptor_StatusCodeRangeArray()
            {
                TestExpectedResponseTypeDescriptor(
                    typeof(byte[]),
                    typeof(ByteArraySerializer),
                    req => req.ReceiveByteArray((StatusCodeRange[])DefaultStatusCodes),
                    DefaultStatusCodes
                );
            }

            [Fact]
            public void ReceiveByteArray_Adds_Expected_ResponseTypeDescriptor_StatusCodeRangeEnumerable()
            {
                TestExpectedResponseTypeDescriptor(
                    typeof(byte[]),
                    typeof(ByteArraySerializer),
                    req => req.ReceiveByteArray((IEnumerable<StatusCodeRange>)DefaultStatusCodes),
                    DefaultStatusCodes
                );
            }

        }

        <# } #>

    }
    <#  } #>

}

#nullable restore
